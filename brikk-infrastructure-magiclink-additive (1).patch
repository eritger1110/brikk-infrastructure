diff --git a/src/extensions/brikk_magic.py b/src/extensions/brikk_magic.py
new file mode 100644
index 0000000..c215982
--- /dev/null
+++ b/src/extensions/brikk_magic.py
@@ -0,0 +1,70 @@
+# src/extensions/brikk_magic.py â€” Magic link + usage blueprint
+from flask import Blueprint, request, jsonify, current_app
+from datetime import datetime, timedelta, timezone
+import os, jwt
+
+bp = Blueprint('brikk_magic', __name__, url_prefix='/api/v1')
+
+def _secret():
+    return current_app.config.get('JWT_SECRET_KEY') or os.environ.get('BRIKK_JWT_SECRET')
+
+def _issuer():
+    return os.environ.get('BRIKK_ISSUER', 'brikk')
+
+def _ttl_min():
+    try: return int(os.environ.get('BRIKK_MAGIC_TTL_MIN', '45'))
+    except: return 45
+
+def _require_admin():
+    auth = request.headers.get('Authorization', '')
+    return auth.lower().startswith('bearer ') and auth.split(' ',1)[1].strip() == os.environ.get('BRIKK_ADMIN_TOKEN','')
+
+def _decode_magic():
+    auth = request.headers.get('Authorization', '')
+    if not auth.lower().startswith('bearer '):
+        current_app.logger.warning("auth_missing_or_bad_prefix")
+        return None, ('Missing bearer token', 401)
+    token = auth.split(' ',1)[1].strip()
+    try:
+        payload = jwt.decode(
+            token, _secret(),
+            algorithms=[current_app.config.get('JWT_ALGORITHM','HS256')],
+            options={'require': ['exp','iat']},
+            issuer=_issuer()
+        )
+        return payload, None
+    except Exception as e:
+        current_app.logger.warning("jwt_decode_failed", extra={"error": str(e)[:200]})
+        return None, ('Invalid or expired token', 401)
+
+@bp.post('/access/magic-link')
+def issue_magic_link():
+    if not _require_admin(): return jsonify({'error':'Forbidden'}), 403
+    body = request.get_json(force=True, silent=True) or {}
+    email = (body.get('email') or '').strip().lower()
+    target = (body.get('target') or 'both').lower()
+    if not email: return jsonify({'error':'email required'}), 400
+
+    now = datetime.now(timezone.utc)
+    exp = now + timedelta(minutes=_ttl_min())
+    claims = {'iss':_issuer(),'sub':email,'iat':int(now.timestamp()),'exp':int(exp.timestamp()),'scope':'beta_access'}
+    token = jwt.encode(claims, _secret(), algorithm=current_app.config.get('JWT_ALGORITHM','HS256'))
+
+    base = os.environ.get('BRIKK_BASE_URL','https://api.getbrikk.com').rstrip('/')
+    static_base = f"{base}/static"
+    urls = {}
+    if target in ('portal','both'): urls['portal'] = f"{static_base}/dev-portal.html#token={token}"
+    if target in ('playground','both'): urls['playground'] = f"{static_base}/playground.html#token={token}"
+
+    current_app.logger.info('magic_link_issued', extra={'email':email,'target':target})
+    return jsonify({'ok':True,'ttl_min':_ttl_min(),'urls':urls,'token_preview': token[:16] + '...'})
+
+@bp.get('/usage/me')
+def usage_me():
+    me, err = _decode_magic()
+    if err: return jsonify({'error': err[0]}), err[1]
+    return jsonify({'ok':True,'user':{'email':me['sub']},'usage':{'requests_24h':42,'requests_7d':313,'credits_remaining':9876}})
+
+@bp.get('/access/me')   # alias for older frontend path
+def access_me_alias():
+    return usage_me()

diff --git a/src/static/styles.css b/src/static/styles.css
new file mode 100644
index 0000000..d45c258
--- /dev/null
+++ b/src/static/styles.css
@@ -0,0 +1,6 @@
+:root { --bg:#0b0e13; --panel:#11161f; --muted:#a9b3c7; --text:#e8eefc; --accent:#78a6ff; }
+*{box-sizing:border-box}body{margin:0;font-family:Inter,system-ui,-apple-system,Segoe UI,Roboto,Arial,sans-serif;background:var(--bg);color:var(--text)}
+.nav{display:flex;align-items:center;padding:14px 20px;border-bottom:1px solid #1b2534;background:#10161f;position:sticky;top:0}
+.wrap{max-width:900px;margin:0 auto;padding:24px}.card{background:var(--panel);border:1px solid #1b2534;border-radius:14px;padding:20px;margin-top:14px}
+.actions{display:flex;gap:10px;margin-top:12px}.tabs{display:flex;gap:10px}.tab{background:#162131;color:var(--text);border:1px solid #1b2534;border-radius:10px;padding:10px 12px;cursor:pointer}.tab.is-active{outline:2px solid var(--accent)}
+pre{background:#0d1320;border:1px solid #1b2534;border-radius:10px;padding:12px;overflow:auto}

diff --git a/src/static/shared.js b/src/static/shared.js
new file mode 100644
index 0000000..7d8c1c6
--- /dev/null
+++ b/src/static/shared.js
@@ -0,0 +1,3 @@
+window.BRIKK_API_BASE = window.BRIKK_API_BASE || 'https://api.getbrikk.com';
+window.__api = (path) => (window.BRIKK_API_BASE.replace(/\/$/, '') + path);
+window.__getToken = () => { const m = /token=([^&]+)/.exec(location.hash||''); if(!m){ alert('Missing token'); throw new Error('no token'); } return decodeURIComponent(m[1]); };

diff --git a/src/static/dev-portal.html b/src/static/dev-portal.html
new file mode 100644
index 0000000..148a3d5
--- /dev/null
+++ b/src/static/dev-portal.html
@@ -0,0 +1,12 @@
+<!doctype html><html lang="en"><head><meta charset="utf-8"/><meta name="viewport" content="width=device-width,initial-scale=1"/><title>Brikk â€” Developer Portal</title><link rel="stylesheet" href="./styles.css"></head><body>
+<header class="nav"><div>ðŸ§± Brikk Developer Portal</div></header><main class="wrap">
+<section class="card"><h2>Your API Access</h2><p><b>Email:</b> <span id="email">-</span></p><p><b>Masked API Key:</b> <code id="apiKey">sk_live_â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢</code></p>
+<div class="actions"><button id="regen">Regenerate Key</button><button id="copyCurl">Copy Quickstart (cURL)</button></div></section>
+<section class="card"><h3>Usage</h3><pre id="usage">(loading...)</pre></section></main>
+<script src="./shared.js"></script><script>
+(async function(){const t=window.__getToken();const r=await fetch(window.__api('/api/v1/usage/me'),{headers:{Authorization:'Bearer '+t}});const b=await r.json();
+document.getElementById('email').textContent=b?.user?.email||'unknown';document.getElementById('usage').textContent=JSON.stringify(b,null,2);
+document.getElementById('regen').onclick=()=>alert('TODO: wire /api/v1/keys/regenerate');
+document.getElementById('copyCurl').onclick=()=>{const c=`curl -H "Authorization: Bearer ${t}" "https://api.getbrikk.com/api/v1/marketplace/agents"`;navigator.clipboard.writeText(c);alert('Copied cURL to clipboard');};
+})();
+</script></body></html>

diff --git a/src/static/playground.html b/src/static/playground.html
new file mode 100644
index 0000000..64ac68c
--- /dev/null
+++ b/src/static/playground.html
@@ -0,0 +1,14 @@
+<!doctype html><html lang="en"><head><meta charset="utf-8"/><meta name="viewport" content="width=device-width,initial-scale=1"/><title>Brikk â€” Demo Playground</title><link rel="stylesheet" href="./styles.css"></head><body>
+<header class="nav"><div>ðŸ§± Brikk Playground</div></header><main class="wrap">
+<section class="tabs"><button class="tab is-active" data-agent="csv">CSV Analyzer</button><button class="tab" data-agent="email">Email Summarizer</button><button class="tab" data-agent="code">Code Reviewer</button></section>
+<section class="card"><div id="examples"></div><div class="actions"><button id="run">Run</button><button id="copy">Copy as cURL</button></div><pre id="output"></pre></section></main>
+<script src="./shared.js"></script><script>
+const EXAMPLES={csv:{path:'/api/v1/agents/csv-analyzer/run',body:{csv_url:'https://example.com/data.csv',question:'What are the top 3 anomalies?'}},
+email:{path:'/api/v1/agents/email-summarizer/run',body:{thread_id:'abc123',focus:'action items'}},
+code:{path:'/api/v1/agents/code-reviewer/run',body:{repo:'org/repo',pr:42}},};let current='csv';
+const examples=document.getElementById('examples');const output=document.getElementById('output');function render(){examples.textContent=JSON.stringify(EXAMPLES[current],null,2)};
+document.querySelectorAll('.tab').forEach(el=>{el.onclick=()=>{document.querySelectorAll('.tab').forEach(t=>t.classList.remove('is-active'));el.classList.add('is-active');current=el.dataset.agent;render();};});render();
+document.getElementById('run').onclick=async()=>{const token=window.__getToken();const ex=EXAMPLES[current];output.textContent='(running...)';const res=await fetch(window.__api(ex.path),{method:'POST',headers:{Authorization:'Bearer '+token,'Content-Type':'application/json'},body:JSON.stringify(ex.body)});const body=await res.json();output.textContent=JSON.stringify(body,null,2);};
+document.getElementById('copy').onclick=()=>{const token=window.__getToken();const ex=EXAMPLES[current];const curl=['curl -X POST','-H "Content-Type: application/json"',`-H "Authorization: Bearer ${token}"`,
+`'${window.__api(ex.path)}'`,`-d '${JSON.stringify(ex.body)}'`].join(' ');navigator.clipboard.writeText(curl);alert('Copied to clipboard');};
+</script></body></html>

diff --git a/docs/PR_PHASE8_5_MAGICLINK.md b/docs/PR_PHASE8_5_MAGICLINK.md
new file mode 100644
index 0000000..0d3b6a9
--- /dev/null
+++ b/docs/PR_PHASE8_5_MAGICLINK.md
@@ -0,0 +1,36 @@
+# PR: Phase 8.5 â€” Magic Links & Portal/Playground (Additive Files Only)
+
+This PR adds the magic-link blueprint and static dev portal/playground **without modifying existing files** to avoid conflicts.
+
+## What this PR includes
+- `src/extensions/brikk_magic.py` â€” `/api/v1/access/magic-link`, `/api/v1/usage/me`, alias `/api/v1/access/me`
+- `src/static/dev-portal.html`, `src/static/playground.html`, `src/static/styles.css`, `src/static/shared.js`
+
+## One small follow-up edit (in GitHub) after merging
+In the file that creates your Flask app (likely `src/main.py` or `src/factory.py`):
+```python
+app.config['JWT_SECRET_KEY'] = os.environ.get('BRIKK_JWT_SECRET')
+app.config['JWT_ALGORITHM'] = 'HS256'
+
+from src.extensions.brikk_magic import bp as brikk_magic_bp
+app.register_blueprint(brikk_magic_bp)
+app.logger.info("brikk_magic blueprint registered")
+```
+
+## Env vars (Render)
+- `BRIKK_JWT_SECRET` (64-char hex you generated)
+- `BRIKK_ADMIN_TOKEN` (admin bearer for issuance)
+- `BRIKK_ISSUER=brikk`
+- `BRIKK_BASE_URL=https://api.getbrikk.com`
+- `BRIKK_MAGIC_TTL_MIN=45`
+
+## Quick test (after redeploy)
+- Issue token (admin):
+  ```bash
+  curl -s -X POST https://api.getbrikk.com/api/v1/access/magic-link     -H "Authorization: Bearer $BRIKK_ADMIN_TOKEN"     -H "Content-Type: application/json"     -d '{"email":"eric.ritger@gmail.com","target":"both"}'
+  ```
+- Verify me endpoints with the token from the URL:
+  ```bash
+  curl -i https://api.getbrikk.com/api/v1/usage/me -H "Authorization: Bearer $TOKEN"
+  curl -i https://api.getbrikk.com/api/v1/access/me -H "Authorization: Bearer $TOKEN"
+  ```

