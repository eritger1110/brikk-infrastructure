version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: brikk-postgres
    environment:
      POSTGRES_DB: brikk_dev
      POSTGRES_USER: brikk
      POSTGRES_PASSWORD: brikk_dev_password
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U brikk -d brikk_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - brikk-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: brikk-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    networks:
      - brikk-network

  # Flask API Service
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: brikk-api
    environment:
      # Flask Configuration
      FLASK_APP: src.main:app
      FLASK_ENV: development
      FLASK_DEBUG: "1"
      
      # Database Configuration
      DATABASE_URL: postgresql://brikk:brikk_dev_password@postgres:5432/brikk_dev
      
      # Redis Configuration
      REDIS_URL: redis://redis:6379/0
      
      # Security (development only - change in production!)
      SECRET_KEY: dev-secret-key-change-in-production
      JWT_SECRET_KEY: dev-jwt-secret-change-in-production
      
      # API Configuration
      API_TITLE: "Brikk Infrastructure API"
      API_VERSION: "1.0.0"
      
      # Logging
      LOG_LEVEL: INFO
      JSON_LOGS: "true"
      
      # Development Settings
      TESTING: "false"
      DEBUG: "true"
    ports:
      - "5000:5000"
    volumes:
      # Mount source code for hot reload
      - ./src:/app/src
      - ./tests:/app/tests
      - ./scripts:/app/scripts
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - brikk-network
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        python -c 'import time; time.sleep(5)' &&
        echo 'Running database migrations...' &&
        alembic upgrade head &&
        echo 'Starting Flask application...' &&
        flask run --host=0.0.0.0 --port=5000
      "

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  brikk-network:
    driver: bridge

