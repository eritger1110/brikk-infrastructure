# Semgrep configuration for Brikk Infrastructure
# This file defines custom security rules and configurations for static analysis

rules:
  # Custom rules for Brikk-specific security patterns
  - id: brikk-hardcoded-secret
    pattern-either:
      - pattern: |
          $SECRET = "sk_..."
      - pattern: |
          $SECRET = "pk_..."
      - pattern: |
          $SECRET = "-----BEGIN PRIVATE KEY-----"
      - pattern: |
          $SECRET = "AKIA..."
    message: "Hardcoded secret detected. Use environment variables instead."
    languages: [python, javascript, typescript]
    severity: ERROR
    metadata:
      category: security
      cwe: "CWE-798: Use of Hard-coded Credentials"
      owasp: "A07:2021 - Identification and Authentication Failures"

  - id: brikk-sql-injection-risk
    pattern-either:
      - pattern: |
          $QUERY = "SELECT * FROM " + $USER_INPUT
      - pattern: |
          $QUERY = f"SELECT * FROM {$USER_INPUT}"
      - pattern: |
          cursor.execute("SELECT * FROM " + $VAR)
    message: "Potential SQL injection vulnerability. Use parameterized queries."
    languages: [python]
    severity: ERROR
    metadata:
      category: security
      cwe: "CWE-89: SQL Injection"
      owasp: "A03:2021 - Injection"

  - id: brikk-weak-crypto
    pattern-either:
      - pattern: hashlib.md5(...)
      - pattern: hashlib.sha1(...)
      - pattern: |
          import md5
      - pattern: |
          import sha
    message: "Weak cryptographic algorithm detected. Use SHA-256 or stronger."
    languages: [python]
    severity: WARNING
    metadata:
      category: security
      cwe: "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"

  - id: brikk-debug-mode-production
    pattern-either:
      - pattern: |
          app.debug = True
      - pattern: |
          app.run(debug=True)
      - pattern: |
          Flask(..., debug=True)
    message: "Debug mode should not be enabled in production."
    languages: [python]
    severity: WARNING
    metadata:
      category: security
      cwe: "CWE-489: Active Debug Code"

  - id: brikk-unsafe-deserialization
    pattern-either:
      - pattern: pickle.loads(...)
      - pattern: pickle.load(...)
      - pattern: cPickle.loads(...)
      - pattern: yaml.load(...)
    message: "Unsafe deserialization detected. Use safe alternatives."
    languages: [python]
    severity: ERROR
    metadata:
      category: security
      cwe: "CWE-502: Deserialization of Untrusted Data"

  - id: brikk-missing-csrf-protection
    pattern: |
      @app.route(..., methods=["POST"])
      def $FUNC(...):
        ...
    message: "POST endpoint may be missing CSRF protection."
    languages: [python]
    severity: INFO
    metadata:
      category: security
      cwe: "CWE-352: Cross-Site Request Forgery (CSRF)"

  - id: brikk-insecure-random
    pattern-either:
      - pattern: random.random()
      - pattern: random.randint(...)
      - pattern: random.choice(...)
    message: "Use secrets module for cryptographically secure random numbers."
    languages: [python]
    severity: INFO
    metadata:
      category: security
      cwe: "CWE-338: Use of Cryptographically Weak Pseudo-Random Number Generator"

  - id: brikk-eval-injection
    pattern-either:
      - pattern: eval(...)
      - pattern: exec(...)
      - pattern: compile(..., ..., "eval")
    message: "Dynamic code execution detected. Avoid eval() and exec()."
    languages: [python]
    severity: ERROR
    metadata:
      category: security
      cwe: "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code"

  - id: brikk-path-traversal
    pattern-either:
      - pattern: open($PATH + $USER_INPUT)
      - pattern: open(f"{$PATH}{$USER_INPUT}")
      - pattern: |
          $FILE = $USER_INPUT
          open($FILE)
    message: "Potential path traversal vulnerability. Validate file paths."
    languages: [python]
    severity: ERROR
    metadata:
      category: security
      cwe: "CWE-22: Path Traversal"

  - id: brikk-command-injection
    pattern-either:
      - pattern: os.system($USER_INPUT)
      - pattern: subprocess.call($USER_INPUT, shell=True)
      - pattern: subprocess.run($USER_INPUT, shell=True)
      - pattern: subprocess.Popen($USER_INPUT, shell=True)
    message: "Command injection vulnerability. Avoid shell=True with user input."
    languages: [python]
    severity: ERROR
    metadata:
      category: security
      cwe: "CWE-78: OS Command Injection"

# Include external rulesets
include:
  - p/security-audit
  - p/owasp-top-ten
  - p/python
  - p/flask
  - p/javascript
  - p/typescript
  - p/secrets

# Exclude patterns
exclude:
  - "*.pyc"
  - "__pycache__/"
  - ".git/"
  - "node_modules/"
  - "venv/"
  - ".venv/"
  - "*.log"
  - "tests/fixtures/"
