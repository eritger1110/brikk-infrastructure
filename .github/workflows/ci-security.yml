name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for manual run'
        required: false
        default: 'Manual security scan'

jobs:
  semgrep:
    runs-on: ubuntu-latest
    name: Semgrep Security Scan
    permissions:
      contents: read
    # Always run Semgrep to catch security issues across all file types
    steps:
    - uses: actions/checkout@v4

    - name: Semgrep (scan)
      uses: returntocorp/semgrep-action@v1
      with:
        config: >
          p/owasp-top-ten
          p/secrets
          p/python
          p/flask
          p/security-audit
        generateSarif: false
      env:
        SEMGREP_TIMEOUT: 180

  gitleaks:
    runs-on: ubuntu-latest
    name: Secret Detection (Gitleaks)
    permissions:
      contents: read
    # Always run secret scanning to prevent credential leaks
    steps:
    - name: Checkout with full history
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download Gitleaks binary
      run: |
        set -euo pipefail
        OS=$(uname -s)
        ARCH=$(uname -m)
        echo "Detected OS: $OS, Architecture: $ARCH"
        
        # Download Gitleaks binary for current platform
        curl -sSL "https://github.com/gitleaks/gitleaks/releases/latest/download/gitleaks_${OS}_${ARCH}.tar.gz" -o gl.tgz
        tar -xzf gl.tgz gitleaks
        chmod +x gitleaks
        
        # Verify installation
        ./gitleaks version

    - name: Scan workspace for secrets
      run: |
        set -euo pipefail
        
        # Run Gitleaks against current workspace only (deterministic)
        ./gitleaks detect \
          --no-banner \
          --redact \
          --report-format json \
          --report-path gitleaks.json \
          --source .
        
        echo "✅ Gitleaks scan completed successfully - no secrets found"

  dependency-check:
    runs-on: ubuntu-latest
    name: OWASP Dependency Check
    permissions:
      contents: read
    # Only run when dependency manifests exist
    if: ${{ hashFiles('**/package-lock.json', '**/yarn.lock', '**/pnpm-lock.yaml', '**/requirements.txt', '**/poetry.lock', '**/Pipfile.lock', '**/Gemfile.lock', '**/composer.lock') != '' }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Java (required for OWASP Dependency Check)
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '11'

    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'brikk-infrastructure'
        path: '.'
        format: 'JSON,HTML'
        args: >
          --enableRetired
          --enableExperimental
          --failOnCVSS 7.0
          --suppression suppression.xml
      continue-on-error: false

    - name: Validate dependency check results
      if: always()
      run: |
        if [ -f reports/dependency-check-report.json ]; then
          echo "✅ OWASP Dependency Check completed"
          
          # Check for high/critical vulnerabilities
          CRITICAL_COUNT=$(jq '.dependencies[] | select(.vulnerabilities[]?.severity == "CRITICAL") | length' reports/dependency-check-report.json 2>/dev/null | wc -l || echo "0")
          HIGH_COUNT=$(jq '.dependencies[] | select(.vulnerabilities[]?.severity == "HIGH") | length' reports/dependency-check-report.json 2>/dev/null | wc -l || echo "0")
          
          echo "Critical vulnerabilities: $CRITICAL_COUNT"
          echo "High vulnerabilities: $HIGH_COUNT"
          
          if [ "$CRITICAL_COUNT" -gt 0 ] || [ "$HIGH_COUNT" -gt 0 ]; then
            echo "❌ High or critical vulnerabilities found"
            exit 1
          else
            echo "✅ No high or critical vulnerabilities found"
          fi
        else
          echo "⚠️ No dependency check report generated"
        fi

    - name: Store dependency check artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: dependency-check-report
        path: reports/
        retention-days: 30
      continue-on-error: true
