name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for manual run'
        required: false
        default: 'Manual security scan'

jobs:
  semgrep:
    runs-on: ubuntu-latest
    name: Semgrep Security Scan
    permissions:
      contents: read
    # Always run Semgrep to catch security issues across all file types
    steps:
    - uses: actions/checkout@v4

    - name: Semgrep (scan)
      uses: returntocorp/semgrep-action@v1
      with:
        config: |
          p/owasp-top-ten
          p/secrets
          p/security-audit
          p/python
          p/flask
          p/javascript
        generateSarif: false
      env:
        SEMGREP_TIMEOUT: 180

  secret-scan:
    runs-on: ubuntu-latest
    name: Secret Pattern Detection
    permissions:
      contents: read
    # Always run secret scanning to prevent credential leaks
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Gitleaks (scan)
      run: |
        curl -sSL https://github.com/gitleaks/gitleaks/releases/latest/download/gitleaks_$(uname -s | tr '[:upper:]' '[:lower:]')_x64.tar.gz -o gl.tgz
        tar -xzf gl.tgz gitleaks
        ./gitleaks detect --no-banner --redact --report-path gitleaks.json --report-format json --log-opts="--no-merges"

  dependency-check:
    runs-on: ubuntu-latest
    name: OWASP Dependency Check
    permissions:
      contents: read
    # Guard to run only when dependency manifests exist
    if: ${{ hashFiles('**/package-lock.json','**/yarn.lock','**/pnpm-lock.yaml','**/requirements.txt','**/poetry.lock','**/Pipfile.lock','**/composer.lock','**/Gemfile.lock') != '' }}
    steps:
    - uses: actions/checkout@v4

    - name: OWASP DC (scan)
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'brikk-infrastructure'
        path: '.'
        format: 'ALL'
        args: >
          --enableRetired
          --enableExperimental
          --failOnCVSS 7

    - name: Upload Dependency Check results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: dependency-check-report
        path: reports/
      continue-on-error: true
