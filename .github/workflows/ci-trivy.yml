name: Trivy Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  trivy-repo-scan:
    runs-on: ubuntu-latest
    name: Trivy Repository Scan
    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner in repo mode
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-repo-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-repo-results.sarif'

    - name: Run Trivy vulnerability scanner (table format)
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'
        severity: 'CRITICAL,HIGH'
        exit-code: '1'

  trivy-docker-scan:
    runs-on: ubuntu-latest
    name: Trivy Docker Image Scan
    steps:
    - uses: actions/checkout@v4

    - name: Create Dockerfile if it doesn't exist
      run: |
        if [ ! -f Dockerfile ]; then
          cat > Dockerfile << 'EOF'
        # Multi-stage build for security and size optimization
        FROM python:3.11-slim as builder

        # Create non-root user
        RUN groupadd -r brikk && useradd -r -g brikk brikk

        # Set working directory
        WORKDIR /app

        # Install system dependencies
        RUN apt-get update && apt-get install -y --no-install-recommends \
            gcc \
            && rm -rf /var/lib/apt/lists/*

        # Copy requirements and install Python dependencies
        COPY requirements.txt .
        RUN pip install --no-cache-dir --user -r requirements.txt

        # Production stage
        FROM python:3.11-slim

        # Create non-root user
        RUN groupadd -r brikk && useradd -r -g brikk brikk

        # Set working directory
        WORKDIR /app

        # Copy Python packages from builder stage
        COPY --from=builder /root/.local /home/brikk/.local

        # Copy application code
        COPY --chown=brikk:brikk . .

        # Update PATH to include user packages
        ENV PATH=/home/brikk/.local/bin:$PATH

        # Switch to non-root user
        USER brikk

        # Expose port
        EXPOSE 8000

        # Health check
        HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
          CMD python -c "import requests; requests.get('http://localhost:8000/health')" || exit 1

        # Run application
        CMD ["gunicorn", "--bind", "0.0.0.0:8000", "--workers", "4", "--timeout", "120", "src.main:app"]
        EOF
        fi

    - name: Build Docker image
      run: |
        docker build -t brikk-infrastructure:${{ github.sha }} .

    - name: Run Trivy vulnerability scanner on Docker image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'brikk-infrastructure:${{ github.sha }}'
        format: 'sarif'
        output: 'trivy-docker-results.sarif'

    - name: Upload Trivy Docker scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-docker-results.sarif'

    - name: Run Trivy vulnerability scanner on Docker image (fail on high/critical)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'brikk-infrastructure:${{ github.sha }}'
        format: 'table'
        severity: 'CRITICAL,HIGH'
        exit-code: '1'

  trivy-config-scan:
    runs-on: ubuntu-latest
    name: Trivy Configuration Scan
    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy configuration scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'config'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-config-results.sarif'

    - name: Upload Trivy config scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-config-results.sarif'

    - name: Run Trivy configuration scanner (table format)
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'config'
        scan-ref: '.'
        format: 'table'
        severity: 'CRITICAL,HIGH'
