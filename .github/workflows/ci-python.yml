name: Python CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - "server/**"
      - "sdks/python/**"
      - "src/**"
      - "requirements.txt"
      - "pyproject.toml"
  pull_request:
    branches: [ main, develop ]
    paths:
      - "server/**"
      - "sdks/python/**"
      - "src/**"
      - "requirements.txt"
      - "pyproject.toml"

jobs:
  python-tests:
    # Guard to avoid failing on repos that don't yet contain this stack
    if: ${{ hashFiles('server/**', 'sdks/python/**', 'src/**', 'requirements.txt', 'pyproject.toml') != '' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov bandit pip-audit
        
        # Install project dependencies if they exist
        if [ -f requirements.txt ]; then
          echo "Installing from requirements.txt"
          pip install -r requirements.txt
        elif [ -f pyproject.toml ]; then
          echo "Installing from pyproject.toml"
          pip install -e .
        else
          echo "No requirements.txt or pyproject.toml found, skipping project dependencies"
        fi

    - name: Run pytest
      run: |
        # Check if tests exist
        if [ -n "$(find . -name '*test*.py' -o -name 'test_*' -o -path '*/tests/*' 2>/dev/null | head -1)" ]; then
          echo "Running pytest on existing tests..."
          pytest --cov-report=xml --cov-report=term-missing || true
        else
          echo "No Python tests found yet, skipping pytest"
          exit 0
        fi

    - name: Run Bandit security scan
      run: |
        # Find Python source directories
        PYTHON_DIRS=""
        for dir in src server sdks/python; do
          if [ -d "$dir" ] && [ -n "$(find "$dir" -name '*.py' 2>/dev/null | head -1)" ]; then
            PYTHON_DIRS="$PYTHON_DIRS $dir"
          fi
        done
        
        if [ -n "$PYTHON_DIRS" ]; then
          echo "Running Bandit on: $PYTHON_DIRS"
          bandit -r $PYTHON_DIRS -f json -o bandit-report.json || true
          bandit -r $PYTHON_DIRS --severity-level medium
        else
          echo "No Python source directories found, skipping Bandit"
          echo '{"results": [], "metrics": {"_totals": {"loc": 0, "nosec": 0}}}' > bandit-report.json
        fi

    - name: Run pip-audit for dependency vulnerabilities
      run: |
        # Check if we have Python dependencies to audit
        if [ -f requirements.txt ] || [ -f pyproject.toml ] || pip list | grep -v "^Package" | grep -v "^-" | tail -n +2 | grep -q .; then
          echo "Running pip-audit on installed packages..."
          pip-audit --desc --format=json --output=pip-audit-report.json || true
          pip-audit --desc --format=cyclonedx-json --output=pip-audit-cyclonedx.json || true
          pip-audit --desc
        else
          echo "No Python dependencies found, skipping pip-audit"
          echo '{"vulnerabilities": []}' > pip-audit-report.json
          echo '{"bomFormat": "CycloneDX", "specVersion": "1.4", "version": 1, "components": []}' > pip-audit-cyclonedx.json
        fi

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: python-security-reports-${{ matrix.python-version }}
        path: |
          bandit-report.json
          pip-audit-report.json
          pip-audit-cyclonedx.json
          coverage.xml
